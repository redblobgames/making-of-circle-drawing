#+title: Making of: Circle drawing tutorial
#+date: <2022-11-28 Mon>
#+vue: t
#+draft: t

People ask me how I write my interactive tutorials. The first few years, I used d3.js, and I wrote [[href:/making-of/line-drawing/][an interactive tutorial about how I made interactive tutorials]]. I now use Vue.js v2, so I'm writing a new interactive tutorial about how I make interactive tutorials with Vue. On this page I'll recreate the first few diagrams of my [[href:/grids/circle-drawing/][circle drawing tutorial]], using [[https://v3.vuejs.org/][Vue.js v2]]. The ideas here will be similar if you use Vue v3 or React or Preact or Lit or Svelte etc.

#+begin_export html
<figure>
{ TODO: diagram showing the final result }
</figure>
#+end_export

The style I use here /relies heavily on knowledge of SVG/. I know SVG pretty well so I use a style that builds on it. If SVG isn't your preference, you may find that you want to use an entirely different style of implementing diagrams. This page documents how I write my pages, but there are many different ways to make [[https://explorabl.es/][interactive pages]] and I'm not saying this is the only or best way. It happens to be what works for me.

* Web page
:PROPERTIES:
:CUSTOM_ID: web-page
:END:

I usually start with a basic web page template that includes scripts, footers, and one blank SVG diagram:

#+begin_export html
<figure>
  <a-output step="1" />
  <a-step step="1" />
</figure>
#+end_export

I attach an ~id=~ to an html element so that I can get to it from Javascript. Sometimes I'll attach it to the ~<svg>~ and sometimes to a ~<div>~ or ~<figure>~ outside the svg. For this page, I want interactive elements outside the svg so I'm putting the id on the ~<figure>~.

I'll omit the header and footer from the rest of the examples. Click the filename on the upper right to see the entire page up to that point. Using a ~viewBox~ on ~<svg>~ tells it the coordinate system to for drawing. We can use that to keep a consistent coordinate system even if the diagram is resized.

* Diagram
:PROPERTIES:
:CUSTOM_ID: diagram
:END:

Sometimes I'll add a diagram first and then add some text; other times I'll start with the text and then figure out the diagrams. For this page I'll start with a diagram.

The tutorial is about drawing circles on a square grid, so I need to draw a grid and also draw circles. I'll draw a grid with SVG. I start by making /one/ grid cell. I can write out the SVG for it:

#+begin_export html
<figure>
  <a-output step="2" />
  <a-step restrict="&lt;figure" step="2" />
</figure>
#+end_export

That's plain HTML+SVG. I could've created that SVG with an interactive editor but in this case I wrote it by hand. But I want /many/ grid cells. This is where the coding comes in. I want to repeat it, varying the position each time:

#+begin_export html
<figure>
  <a-output step="3" />
  <a-step restrict="&lt;figure" step="3" />
  <a-step show="js" step="3" />
</figure>
#+end_export

How does this work? In Vue, ~v-for~ means to repeat an element. In this case, it will create the =<rect>= for each element in =positions=. I make an array =positions= that contains all the =q=, =r= values I want on the grid, and then Vue will make one =<rect>= for each. The ~:x=~ syntax means it's setting the =x= attribute, but will compute it using a Javascript expression like =q * scale=. I often use =q=, =r= for the /grid/ coordinates and =x=, =y= for the /diagram/ (pixel) coordinates to reduce the chances of mixing them up.

In React, I'd use ~positions.map(…)~ to make an array of =<rect>=. In Svelte I'd use ~#{each … in positions}~. In Lit I'd use ~${repeat(positions, …)}~. These libraries have a way to loop over arrays, but they differ in the details. I'm showing Vue on this page but the concepts are similar across these libraries.

Those of you who know SVG might choose to use =viewBox= or =transform= to change the coordinate system to place points at the center of each grid square instead of at the top left, and also to scale things so that each grid square is 1 unit across instead of =scale= pixels. I did this in the original article but I didn't for this tutorial.

* Detail: negative space
:PROPERTIES:
:CUSTOM_ID: detail-negative-space
:END:

While working on a page, I'll sometimes work on the details during the process and sometimes towards the end. On this page I'll work on them during the process. For the grid, I sometimes use [[href:/making-of/little-things/#negative-space][negative space]]. Instead of drawing the grid lines, I'll draw grid interiors slightly smaller, in a color other than the background. The gaps serve as the edges:

#+begin_export html
<figure>
  <a-output step="4" />
  <a-step restrict="&lt;figure" step="4" />
</figure>
#+end_export

I don't do this for all pages. I use this on the A* pages, where the attention should be on the paths, but not on the hexagon pages, where the attention should be on the grid itself. Sometimes the color scheme doesn't allow for it.

* Algorithm
:PROPERTIES:
:CUSTOM_ID: algorithm
:END:

The most obvious thing to do with an interactive diagram is to run the algorithm and display the results. In this case, the first algorithm I present [[href:/grids/circle-drawing/#distance-test][on the page]] is a distance test in C++:

#+begin_src cpp
bool inside_circle(Point center, Point tile, float radius) {
    float dx = center.x - tile.x,
          dy = center.y - tile.y;
    float distance = sqrt(dx*dx + dy*dy);
    return distance <= radius;
}

for (int y = 0; y < height; y++) {
    for (int x = 0; x < width; x++) {
        if (inside_circle(center, Point(x, y), radius)) {
            // do something with (x, y)
        }
    }
}
#+end_src

This returns a =bool= for each tile. In the diagram, I can use a /color/ to show that boolean value.

#+begin_export html
<figure>
  <a-output step="5" />
</figure>
#+end_export

But the sample code is C++ and the diagram code is JavaScript, so I have to decide what to do here. I could compile the C++ to WASM so that I can directly call it from JavaScript, but in this case it is easier to reimplement it. The next question is /where/ should it go. I could either call =insideCircle= and then choose the color in the HTML, or I could have the HTML call =tileColor= and have that function select the color in JavaScript. I decided to select the color in the HTML. In Vue, a function has to be exported to make it available in the HTML template, but that detail will vary in React, Svelte, etc. 

#+begin_export html
<figure>
  <a-step restrict="&lt;figure" step="5" />
</figure>
#+end_export

I also need to decide where to store the circle center and radius. I decided to put those into the Vue =data=, which stores the state for that diagram. I will later want to make these interactive.

#+begin_export html
<figure>
  <a-step show="js" restrict="function insideCircle|new Vue" step="5" />
</figure>
#+end_export

One thing to note is that /I didn't implement the entire algorithm/. The full algorithm has a loop over tiles, and then runs the test for each tile, and collects the results. But in the diagram, the loop is implicit. I don't actually need to collect the results.

*This happens a lot*. The code for the /diagram/ is not the same as the original algorithm. The point of the diagram is help the /reader/ understand the concepts. It's not to demonstrate that /I/ know how to implement the algorithm. For example, in [[https://betterexplained.com/articles/quadratic-formula/][this article about the quadratic formula]], it would be easy to run the quadratic formula and give the answer. But the diagrams do something quite different, showing how completing a square relates to the quadratic formula.

* Interaction
:PROPERTIES:
:CUSTOM_ID: interaction
:END:

The diagram is now showing the /output/ of the algorithm, but it's not yet interactive. The obvious thing to do is to allow the reader to change the /inputs/. In this case the inputs are the center and radius of the circle. Let's add sliders to control those three numbers:

#+begin_export html
<figure>
  <a-output step="6" />
</figure>
#+end_export

In Vue, React, etc. the "source of truth" is a JavaScript value, and the HTML element displays/edits it. I need two parts, setting the slider /from/ a  JavaScript variable, and updating the JavaScript variable /from/ the slider when it's moved. In Vue, ~v-model~ is a shorthand syntax for setting both of those steps. In Svelte, ~bind:value~ is the shorthand syntax. In React and Lit, I can write the two parts separately. I'm using ~v-model.number~ to tell Vue that I want the value to be a number instead of a string:

#+begin_export html
<figure>
  <a-step restrict="&lt;label" step="6" />
</figure>
#+end_export

With the radius, I have /two/ =<input>= elements, both set to the same variable. That way I can edit either way (as a slider or an input box).

Editable variables need to be exported in Vue's =data= section, but I already had them there so I didn't have to change the HTML in this step.

* Direct manipulation
:PROPERTIES:
:CUSTOM_ID: handle-center
:END:

Sliders are easy to implement, since the browser already supports ~<input type=range>~. When editing a geometric parameter like /position/, it's often better to directly manipulate the position by dragging it than to indirectly manipulate it by using a slider.

The bad news: this is where things get trickier. The good news: once I figured this part out, I reused it across lots of projects. I'm going to start with the simpler implementation, but there are [[href:/making-of/little-things/#interactivity][many more details that can be added]].

The first thing to do is add a /handle/. This is an object that represents the underlying variable, and is something the reader can drag around. The circle center is in /grid/ coordinates, and I need to turn them into /diagram/ coordinates. To do that, I add =1/2= so that the circle is centered inside a tile, then multiply by =scale=.

#+begin_export html
<figure>
  <a-output step="7" />
  <a-step step="7" restrict="&lt;circle"/>
</figure>
#+end_export

So far it's in the SVG but there's no behavior. Let's add some behavior to it:

#+begin_export html
<figure>
  <a-output step="8" />
  <a-step step="8" restrict="&lt;circle"/>
</figure>
#+end_export

Here's where it gets tricky. To go from the =center= in grid coordinates to a position in the diagram, I added =1/2= and then multiplied by =scale=. But that's in SVG coordinates. In almost all cases I can work in the SVG coordinates, but mouse events come in screen coordinates, so there's an extra step to convert that to SVG coordinates:

1. Convert screen coordinates to SVG coordinates, using a helper function.
2. Convert SVG coordinates to grid coordinates: I divide by =scale= and then subtract =1/2=.

For the first, I use a helper function. It's useful across projects. It doesn't handle all cases, and probably can't [[https://github.com/d3/d3/issues/2810#issuecomment-213786022][because of browser bugs]], but it handles the cases I need it to handle.

#+begin_export html
<figure>
  <a-step step="8" show="js" restrict="function convertPixelToSvgCoord" />
</figure>
#+end_export

For the second, I use this event handler, which gets called by ~@pointermove="moveCenter"~:

#+begin_export html
<figure>
  <a-step step="8" show="js" restrict="moveCenter" />
</figure>
#+end_export

This kind of two-way mapping from data to diagram and back is common, and I occasionally go overboard and [[href:/articles/curved-paths/making-of.html][write a library to handle it]]. But in most cases I write it manually.

If you try the demo you'll notice it doesn't work that well. There are three problems here:

1. Mouse move hover events don't work well on most touch devices unless you're holding down a button or finger. The solution is to make it move while the mouse button / finger is held down.
2. You can move the drag handle only while the mouse is on top of the drag handle. The solution is to use [[https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture][pointer capture]], which directs all mouse move events to the drag handle while the button / finger is being held down.
3. The drag handle isn't snapping to the grid tile, and it can also go off the edge of the grid. The solution is to use =Math.round()=, and then =clamp()=.

Here's the version with dragging instead of mouseover:

#+begin_export html
<figure>
  <a-output step="9" />
</figure>
#+end_export

To implement this, I need a ~dragging~ flag and a pair of event handlers to update it:

#+begin_export html
<details><summary>Details →</summary>
  <p>
  Pointer events unify touch and mouse, but touch devices <em>also</em>
  let you scroll the page. I want to prevent <code>touchstart</code> on
  the drag handle from scrolling the page. Then <code>pointerdown</code>+<code>pointerup</code>
  let me track whether the mouse/finger is held down. The <code>pointercancel</code>
  handler gets called <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event">for various reasons</a> and I use that to reset the dragging status.
  </p>
</details>
<figure>
  <a-step step="9" restrict="&lt;circle"/>
</figure>
#+end_export

#+begin_export html
<figure>
  <a-step step="9" show="js" restrict="pointer(Down|Up)" />
</figure>
#+end_export

We're not done yet! I want to snap the drag handle to the nearest grid tile, using a reusable helper function =clamp()=:

#+begin_export html
<figure>
  <a-step step="9" show="js" restrict="function clamp" />
  <a-step step="9" show="js" restrict=" moveCenter" />
</figure>
#+end_export

There are some other details to take care of. Touch events /also/ scroll the browser view. We need to ~prevent~ the ~@touchstart~ event from its default action to stop the scrolling when dragging the handle.

It works now.  [[href:/making-of/little-things/#interactivity][It could be better]]. Even though some of this code is reusable across projects, it's still a bit of work to make draggable handles. I often start with sliders and try out the diagram before implementing drag handles.

* Reusable drag handle
:PROPERTIES:
:CUSTOM_ID: handle-component
:END:

Dragging the circle center around is nicer than setting the two sliders. It might also be nice to adjust the circle radius that way. The simplest thing to do is to write similar code for the radius as I did for the center. But this is usually the time when I start wanting to make the dragging functionality reusable. In Vue, React, etc., this can be a "component". This component will be reusable across projects.

Any time I'm turning multiple instances of something into a reusable abstraction (class, function, module, component, etc.), the key question is: what parts are /common/ and what parts are /differing/? The common part is that I'm going to have a =<circle>= with the pointer event handlers. The differing parts are going to be the size, color, and how the data maps to the position and back. The common parts go into the abstraction, and the differing parts go into the parameters.

In the previous section I mentioned that it's common to have a two-way mapping, from original data to diagram position, and from diagram position back to data. With the circle center, that involved converting from grid coordinates to diagram coordinates by scaling and adding. But the radius will be converted differently. Vue offers a way to do this called =computed= values. Here I map =center= (grid coordinates) to =centerPosition= (diagram coordinates) using the getter, and map the other direction using the setter. It's the same code as in the previous section but now I've put the two mappings together in one place:

#+begin_export html
<figure>
  <a-step step="10" show="js" restrict="computed:"/>
</figure>
#+end_export

I can then refactor the previous section's code into a component that takes the position, color, and size as parameters. It'll be similar in React, Svelte, etc.:

#+begin_export html
<figure>
  <a-step step="10" show="js" restrict="Vue.component"/>
</figure>
#+end_export

The code is similar to what I wrote in the previous section, but the refactoring adds two things. The ~props~ are the parameters being passed /down/. The ~this.$emit~ is an update event being sent /up/. In Vue there's a [[https://v2.vuejs.org/v2/guide/components.html#Using-v-model-on-Components][shorthand syntax]] I can use if the thing being changed is named =value= and the update event is named ='input'=:

#+begin_export html
<figure>
  <a-step step="10" restrict="drag-handle"/>
</figure>
#+end_export

#+begin_export html
<details>
<summary>See the diff</summary>
<figure>
  <div>The common part of the html moves into the component:</div>
  <a-step step="10" show="html" :diff="true" restrict="&lt;svg"/>
  <div>and the common methods also move into the component:</div>
  <a-step step="10" show="js" :diff="true" restrict="new Vue|Vue\.component"/>
  <div>The mapping from grid coordinates to diagram coordinates are not
     common, so they are placed outside the component, in the 
     <code>computed</code> section.</div>
</figure>
</details>
#+end_export

Does the new component work? Let's try it:

#+begin_export html
<figure>
  <a-output step="10" />
</figure>
#+end_export

Ok, great! I now have a reusable drag handle component.

I should point out that I usually do not try to make something reusable right away. I write it in a non-reusable way, get it working, then wait until I have a second (or [[https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)][third]]) need for it before I turn it into an abstraction.

* Radius handle
:PROPERTIES:
:CUSTOM_ID: handle-radius
:END:

Let's use the new component for changing the radius. I need a way to map the radius to a position on screen and back.

#+begin_export html
<figure>
  <a-step step="11" show="js" restrict="radiusPosition:"/>
</figure>
#+end_export

and then I need to add the drag handle to the HTML:

#+begin_export html
<figure>
  <a-step step="11" show="html" restrict="radiusPosition"/>
</figure>
#+end_export

And … it works! There are now three ways to control the radius, and they all stay in sync:

#+begin_export html
<figure>
  <a-output step="11" />
</figure>
#+end_export

Note that there are no explicit =redraw()= calls here. In Vue, if I modify the =data=, it will automatically figure out which parts of the diagram need to be redrawn. If you're using React, Svelte, etc., the redraw will work a little differently.

* Distance diagram
:PROPERTIES:
:CUSTOM_ID: diagram-distance
:END:

The diagram shows the /output/ of the algorithm, but to explain how an algorithm works, I want diagrams that show the /concepts/ behind the algorithm. I want to add more diagrams on the page, so I need to have more =<figure>= tags, and also need to change the JavaScript to instantiate all the diagrams instead of one. Where previously I was telling Vue to look at a single element ~"#diagram"~ , I'm going to loop through the diagrams using ~for (let el of document.querySelectorAll("figure"))~ and tell Vue to run on each of them independently.

#+begin_export html
<details>
<summary>See the diff</summary>
<div>I'm also taking the slider out.</div>
<figure>
  <a-step step="12" :diff="true" restrict="&lt;figure" />
  <a-step step="12" show="js" :diff="true" restrict="for \(let el|new Vue"/>
</figure>
</details>
#+end_export

Now I have two identical diagrams:

#+begin_export html
<figure>
  <a-output step="12" />
</figure>
#+end_export

Notice that because I created two separate instances of Vue, the two diagrams have their own =data= including center and radius. Sometimes I want them to be in sync and sometimes I want them independent. Here I implemented them as independent values. If I want them to be in sync, I'll create a ~new Vue()~ with only data and no diagram, and then I'll point the other diagrams at the shared data.

I use copy/paste here instead of immediately building reusable abstractions because I've found that [[https://simblob.blogspot.com/2021/04/redesigning-my-circle-diagrams-part-2.html][when I build the abstraction first, it makes my diagrams worse]]. I find myself wanting to use the abstraction rather than making the best diagram for each situation. The abstractions are better when I wait to see what's in common.

The main concept here is /distances/, so I want to make the second diagram show distances. To implement this, I added =<text>= to each grid tile, using Vue's ~{{…}}~ to evaluate a JavaScript expression to set the text:

#+begin_export html
<figure>
  <a-step step="13" :diff="true" restrict="diagram-distances" />
</figure>
#+end_export

Here's the result.

#+begin_export html
<figure>
  <a-output step="13" />
</figure>
#+end_export


* Detail: appearance
:PROPERTIES:
:CUSTOM_ID: detail-appearance
:END:

I'm going to focus on the second diagram for a bit. The black text on red squares is a bit hard to read. I can change it to white but only when the square is red. The logic is starting to feel duplicated, and I'm wanting to refactor it, but I will wait a bit longer.

#+begin_export html
<details>
<summary>See the diff</summary>
<figure>
  <a-step step="14" :diff="true" restrict="diagram-distances" />
</figure>
</details>
#+end_export

The text labels take a bit too much space when the distance goes over 10. I can shrink the text the text a little bit by reducing precision. The logic for this is a bit too much to put in the HTML, so I moved it into a method. Another option would be to reduce the font size as the distance increases.

#+begin_export html
<figure>
  <a-step step="14" show="js" restrict="distanceLabel" />
</figure>
#+end_export

The result is looking a little better.

#+begin_export html
<figure>
  <a-output step="14" />
</figure>
#+end_export

But is it, really? No! ([[https://simblob.blogspot.com/2021/04/redesigning-my-circle-diagrams-part-1.html][I didn't realize this for over a year after publishing]])

What is the /purpose/ of this diagram? I'm trying to show /distances/. I want to distinguish the distances inside the circle from the ones outside the circle. But I don't actually need to show the /output/ of the algorithm here. Do I need the red at all? I was using the red because the first diagram did. The red is a bold color and draws the reader's attention. If distances are the main idea here, then distances should draw the reader's attention.

So let's design this diagram around /distances/.

1. Show the distances in two different colors for inside and outside the circle.
2. Show the circle itself to see what we're approximating.
3. Reduce the empty grid space and give more space to the circle itself.
4. Make sure the drag handles are visible against the new background colors, and change the mouse pointer shape to let the reader know those objects are draggable.

#+begin_export html
<details>
<summary>See the diff</summary>
<figure>
  <a-step step="15" :diff="true" restrict="diagram-distances" />
  <a-step step="15" show="js" :diff="true" />
</figure>
</details>
#+end_export

#+begin_export html
<figure>
  <a-output step="15" />
</figure>
#+end_export

I think this design without the red areas helps the reader focus on distances.

There's a bit more I want to do with the distance diagram but I'm wanting to refactor. I try to wait before I refactor but I think the repeated ~v-for~ loop and the repeated ~insideCircle()~ calls could be simplified. I'm using SVG ~<g>~ to *g*roup the elements together so that I can use a single ~v-for~ loop. The =transform= on this will position elements on the center of the tile. Then I'm calling ~insideCircle()~ just once, and assigning the result to a =class=:

#+begin_export html
<figure>
  <a-step step="16" :diff="true" restrict="id=.diagram-distances" />
</figure>
#+end_export

I can use that =class= with CSS rules to apply the color and font changes:

#+begin_export html
<figure>
  <a-step step="16" :diff="true" restrict="style" />
</figure>
#+end_export

There's more refactoring that could be done. For example, I could make that ~<g>~ into a component that has the rect and text inside of it.

* Radius display
:PROPERTIES:
:CUSTOM_ID: display-radius
:END:

The algorithm is about comparing distances to the radius. The current design shows the distances.
After removing the radius slider, there's no place that shows the actual radius. I could display the value with a measure line and also in the figure caption. To implement the measure line, I want to use arrows. In SVG, I use [[href:/making-of/little-things/#arrows][markers]]. It'll be an arrow pointing left, the measurement, and an arrow pointing right. I adjust the starting position of the line to give a little room for the label. It might be better to calculate this but [[https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it][YAGNI]] says I shouldn't worry about it.

The SVG is a little messy, and I could clean it up later by writing a reusable component to draw an arrow:

#+begin_export html
<figure>
  <a-step step="17" restrict="&lt;line" />
</figure>
#+end_export

It relies on the line positions, which I calculate here:

#+begin_export html
<figure>
  <a-step step="17" show="js" restrict="measureLine" />
</figure>
#+end_export

The =<figure>= element has an optional =<figcaption>= description of the figure, and I can generate that dynamically here:

#+begin_export html
<figure>
  <a-step step="17" restrict="figcaption" />
</figure>
#+end_export

And here's the output:

#+begin_export html
<figure>
  <a-output step="17" />
</figure>
#+end_export

In the previous section I removed the red because it was attached to the algorithm output, and I didn't want the output to be the main focus. Here I've added red back to show the radius. That's the number I want the reader to focus on. There are plenty more details that can be added to this diagram; compare to the [[href:/grids/circle-drawing/#distance-test][original diagram]].

Writing all this SVG by hand seems a little bit tedious. I've considered diagramming tools like [[https://penrose.cs.cmu.edu/][Penrose]], but I haven't found anything that fits my needs. I've also considered writing my own libraries but my current strategy is to have many simple one-offs instead of one general-purpose diagramming tool with all the features.

* Bounding box diagram
:PROPERTIES:
:CUSTOM_ID: diagram-bounding-box
:END:

The [[href:/grids/circle-drawing/#bounding-box][next diagram on the page]] started out as a variant of the previous one. When making two variants of a diagram, the easiest thing is to copy/paste, even though we've been taught not to. The disadvantage of copy/paste is that if you want to change both diagrams then you have to make the changes twice. The advantage of copy/paste though is that it's easier to make the diagrams different. Since I don't /know/ ahead of time that these two diagrams should be the same, I've had better results by letting the two diagrams evolve separately, and /then/ looking for similarities to refactor.

The focus of this page is the bounding box. Let's highlight the bounding box. Outside the bounding box the algorithm doesn't calculate distances, so let's remove those distances from the diagram.

#+begin_export html
<figure>
  <a-output step="18" />
</figure>
#+end_export


#+begin_export html
<details>
<summary>I implemented this by adding a <code>bbox</code> bounding box computed value, and then applying a different style to tiles outside the bounding box. See the diff</summary>
<figure>
  <a-step step="18" show="js" :diff="true" restrict="bbox\(\)|insideBounds" />
  <a-step step="18" :diff="true" restrict="&lt;svg" />
</figure>
</details>
#+end_export

I also want to add measure lines labeling the bounding box. Since I now have multiple arrows to show, I'm going to make that a component. Unfortunately SVG doesn't allow dynamically coloring the arrowheads so I would need a new =<defs>= section for each color, and it's hard to make a truly reusable component here. Fortunately in this diagram all the arrowheads are the same color, and I can make a component for this page.

* Introductory diagram

* Appendix: alternatives

- When to refactor?
- Why not vanilla JS, using innerHTML?
- Why not d3?
- Why not React?
- Why not Vue 3?
- Why not Svelte, or others?

{ global: there's some css I haven't explained; should it go into the individual pages }

#+begin_export html
<style>
  main iframe { 
    width: 100%; 
    border: 0;
    margin: 0;
    padding: 0;
    box-shadow: 0 0.5px 3px 1px rgb(0 0 0 / 0.3);
  }

  figure { text-align: left; }

  details { padding: 0 1em; }
  details p { margin: 0; padding: 0 1em; }
  details[open] { 
    background: linear-gradient(to right, hsl(200 10% 95%), white);
    border: 2px solid hsl(200 10% 70%); 
    border-right-width: 0; 
  }

  pre { line-height: 1.25em; }

  /* Prism */
  .language-html, .language-handlebars, .language-javascript { font-size: 1rem; }

  /* Prism html, purple theme */
  :is(.language-html,.template-string) .token.punctuation { color: hsl(300 10% 60%); font-weight: normal; }
  .token.doctype-tag, .token.tag { color: hsl(300 30% 40%); font-weight: bold; }
  .token.name, .token.attr-name { color: hsl(300 30% 50%); font-weight: normal; }
  .token.attr-value { color: hsl(300 10% 50%); }

  /* Prism javascript, blue theme, but also trying to make it match my emacs-htmlize.scss */
  .language-javascript .token.punctuation { color: hsl(200 10% 60%); }
  .src .type, .src .keyword, .token.keyword { color: hsl(200 20% 40%); font-weight: bold; }
  .src .function-name, .token.function { color: hsl(200 50% 40%); }
  .token.keyword + .token.function { font-weight: bold; }
  .token.number { color: #000; }
  .token.string { color: #888; }
  .src .variable-name { color: hsl(200 20% 30%); font-weight: normal; }

  /* Prism javascript in html, for Vue, should be blue */
  .value.language-javascript, .value.language-javascript .token { color: hsl(200 30% 50%); font-weight: normal; font-style: italic; }

  .token.handlebars > :is(:first-child, :last-child) { color: black; }
  .token.handlebars > :not(:is(:first-child, :last-child)) { color: hsl(200 30% 50%); font-style: italic; }

  /* Prism diffs */
  .prefix.deleted { color: hsl(0 50% 50%); background: hsl(0 30% 90%); }
  .prefix.inserted { color: hsl(180 50% 50%); background: hsl(180 30% 90%); }
</style>

<x:footer>
  <script type="module" src="making-of-circle-drawing.js"></script>
  Created 28 Nov 2022 
  with <a href="https://v2.vuejs.org/">Vue.js</a> 
  and <a href="https://prismjs.com/">Prism.js</a> 
  and <a href="https://www.npmjs.com/package/diff-sequences">Diff-Sequences</a>
  ; &#160;
  <!-- hhmts start -->Last modified: 02 Jan 2023<!-- hhmts end -->
</x:footer>
#+end_export
